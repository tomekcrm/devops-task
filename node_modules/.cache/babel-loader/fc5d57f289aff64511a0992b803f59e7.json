{"ast":null,"code":"import Big from \"big.js\";\nimport operate from \"./operate\";\nimport isNumber from \"./isNumber\";\n\n/**\n * Given a button name and a calculator data object, return an updated\n * calculator data object.\n *\n * Calculator data object contains:\n *   total:String      the running total\n *   next:String       the next number to be operated on with the total\n *   operation:String  +, -, etc.\n */\nexport default function calculate(obj, buttonName) {\n  if (buttonName === \"AC\") {\n    return {\n      total: null,\n      next: null,\n      operation: null\n    };\n  }\n  if (isNumber(buttonName)) {\n    if (buttonName === \"0\" && obj.next === \"0\") {\n      return {};\n    }\n    // If there is an operation, update next\n    if (obj.operation) {\n      if (obj.next) {\n        return {\n          next: obj.next + buttonName\n        };\n      }\n      return {\n        next: buttonName\n      };\n    }\n    // If there is no operation, update next and clear the value\n    if (obj.next) {\n      const next = obj.next === \"0\" ? buttonName : obj.next + buttonName;\n      return {\n        next,\n        total: null\n      };\n    }\n    return {\n      next: buttonName,\n      total: null\n    };\n  }\n  if (buttonName === \"%\") {\n    if (obj.operation && obj.next) {\n      const result = operate(obj.total, obj.next, obj.operation);\n      return {\n        total: Big(result).div(Big(\"100\")).toString(),\n        next: null,\n        operation: null\n      };\n    }\n    if (obj.next) {\n      return {\n        next: Big(obj.next).div(Big(\"100\")).toString()\n      };\n    }\n    return {};\n  }\n  if (buttonName === \".\") {\n    if (obj.next) {\n      // ignore a . if the next number already has one\n      if (obj.next.includes(\".\")) {\n        return {};\n      }\n      return {\n        next: obj.next + \".\"\n      };\n    }\n    return {\n      next: \"0.\"\n    };\n  }\n  if (buttonName === \"=\") {\n    if (obj.next && obj.operation) {\n      return {\n        total: operate(obj.total, obj.next, obj.operation),\n        next: null,\n        operation: null\n      };\n    } else {\n      // '=' with no operation, nothing to do\n      return {};\n    }\n  }\n  if (buttonName === \"+/-\") {\n    if (obj.next) {\n      return {\n        next: (-1 * parseFloat(obj.next)).toString()\n      };\n    }\n    if (obj.total) {\n      return {\n        total: (-1 * parseFloat(obj.total)).toString()\n      };\n    }\n    return {};\n  }\n\n  // Button must be an operation\n\n  // When the user presses an operation button without having entered\n  // a number first, do nothing.\n  // if (!obj.next && !obj.total) {\n  //   return {};\n  // }\n\n  // User pressed an operation button and there is an existing operation\n  if (obj.operation) {\n    return {\n      total: operate(obj.total, obj.next, obj.operation),\n      next: null,\n      operation: buttonName\n    };\n  }\n\n  // no operation yet, but the user typed one\n\n  // The user hasn't typed a number yet, just save the operation\n  if (!obj.next) {\n    return {\n      operation: buttonName\n    };\n  }\n\n  // save the operation and shift 'next' into 'total'\n  return {\n    total: obj.next,\n    next: null,\n    operation: buttonName\n  };\n}","map":{"version":3,"names":["Big","operate","isNumber","calculate","obj","buttonName","total","next","operation","result","div","toString","includes","parseFloat"],"sources":["/home/ubuntu/react/node_modules/calculator/src/logic/calculate.js"],"sourcesContent":["import Big from \"big.js\";\n\nimport operate from \"./operate\";\nimport isNumber from \"./isNumber\";\n\n/**\n * Given a button name and a calculator data object, return an updated\n * calculator data object.\n *\n * Calculator data object contains:\n *   total:String      the running total\n *   next:String       the next number to be operated on with the total\n *   operation:String  +, -, etc.\n */\nexport default function calculate(obj, buttonName) {\n  if (buttonName === \"AC\") {\n    return {\n      total: null,\n      next: null,\n      operation: null,\n    };\n  }\n\n  if (isNumber(buttonName)) {\n    if (buttonName === \"0\" && obj.next === \"0\") {\n      return {};\n    }\n    // If there is an operation, update next\n    if (obj.operation) {\n      if (obj.next) {\n        return { next: obj.next + buttonName };\n      }\n      return { next: buttonName };\n    }\n    // If there is no operation, update next and clear the value\n    if (obj.next) {\n      const next = obj.next === \"0\" ? buttonName : obj.next + buttonName;\n      return {\n        next,\n        total: null,\n      };\n    }\n    return {\n      next: buttonName,\n      total: null,\n    };\n  }\n\n  if (buttonName === \"%\") {\n    if (obj.operation && obj.next) {\n      const result = operate(obj.total, obj.next, obj.operation);\n      return {\n        total: Big(result)\n          .div(Big(\"100\"))\n          .toString(),\n        next: null,\n        operation: null,\n      };\n    }\n    if (obj.next) {\n      return {\n        next: Big(obj.next)\n          .div(Big(\"100\"))\n          .toString(),\n      };\n    }\n    return {};\n  }\n\n  if (buttonName === \".\") {\n    if (obj.next) {\n      // ignore a . if the next number already has one\n      if (obj.next.includes(\".\")) {\n        return {};\n      }\n      return { next: obj.next + \".\" };\n    }\n    return { next: \"0.\" };\n  }\n\n  if (buttonName === \"=\") {\n    if (obj.next && obj.operation) {\n      return {\n        total: operate(obj.total, obj.next, obj.operation),\n        next: null,\n        operation: null,\n      };\n    } else {\n      // '=' with no operation, nothing to do\n      return {};\n    }\n  }\n\n  if (buttonName === \"+/-\") {\n    if (obj.next) {\n      return { next: (-1 * parseFloat(obj.next)).toString() };\n    }\n    if (obj.total) {\n      return { total: (-1 * parseFloat(obj.total)).toString() };\n    }\n    return {};\n  }\n\n  // Button must be an operation\n\n  // When the user presses an operation button without having entered\n  // a number first, do nothing.\n  // if (!obj.next && !obj.total) {\n  //   return {};\n  // }\n\n  // User pressed an operation button and there is an existing operation\n  if (obj.operation) {\n    return {\n      total: operate(obj.total, obj.next, obj.operation),\n      next: null,\n      operation: buttonName,\n    };\n  }\n\n  // no operation yet, but the user typed one\n\n  // The user hasn't typed a number yet, just save the operation\n  if (!obj.next) {\n    return { operation: buttonName };\n  }\n\n  // save the operation and shift 'next' into 'total'\n  return {\n    total: obj.next,\n    next: null,\n    operation: buttonName,\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}